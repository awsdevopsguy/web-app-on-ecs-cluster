version: 0.2

phases:
  install:
    commands:
      - echo "Setting AWS credentials..."
      - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      - echo "AWS credentials set"
      - echo "Installing kubectl..."
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin
      - echo "kubectl installed"

  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - aws ecr get-login-password --region "$AWS_DEFAULT_REGION" | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"

  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Building the Docker image..."
      - docker build -t "$IMAGE_REPO_NAME:$IMAGE_TAG" .
      - docker tag "$IMAGE_REPO_NAME:$IMAGE_TAG" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"

  post_build:
    commands:
      - echo "Build completed on $(date)"
      - echo "Pushing the Docker image..."
      - docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"
      - echo "EKS_DEPLOYMENT_NAME:$EKS_DEPLOYMENT_NAME"
      - echo "EKS_CONTAINER_NAME:$EKS_CONTAINER_NAME"
      - echo "AWS_ACCOUNT_ID:$AWS_ACCOUNT_ID"
      - echo "IMAGE_REPO_NAME:$IMAGE_REPO_NAME"
      - echo "IMAGE_TAG:$IMAGE_TAG"
      
      # Deploy to EKS
      - echo "Configuring kubectl to access EKS..."
      - aws eks --region "$AWS_DEFAULT_REGION" update-kubeconfig --name "$EKS_CLUSTER_NAME"
      - kubectl config get-contexts
      - echo "Checking EKS cluster authentication..."
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_ROLE_ARN --role-session-name eks-codebuild --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      # Updating kubectl with your EKS Cluster              
      - echo "Update Kube Config configuration"      
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME   
      - aws eks get-token --cluster-name "$EKS_CLUSTER_NAME"
      - echo "Deploying to EKS..."
      - aws eks --region us-east-1 update-kubeconfig --name my-cluster
      - kubectl get deployments
      - kubectl set image deployment/"$EKS_DEPLOYMENT_NAME" "$EKS_CONTAINER_NAME=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG" --dry-run=client -o yaml
      - kubectl set image deployment/"$EKS_DEPLOYMENT_NAME" "$EKS_CONTAINER_NAME=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"
      - kubectl rollout status deployment/"$EKS_DEPLOYMENT_NAME"
      - echo "EKS deployment updated successfully!"

      # Uncomment below to deploy to ECS
      # - echo "Deploying to ECS..."
      # - ecs-deploy -c "$ECS_CLUSTER_NAME" -n "$ECS_SERVICE_NAME" -i "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"
      # - echo "ECS deployment updated successfully!"

artifacts:
  files:
    # Uncomment if you want to keep track of deployment artifacts
    # - imagedefinitions.json
